#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfirmWrite {
    #[prost(message, optional, tag="1")]
    pub confirmed_to: ::std::option::Option<super::storage::ChangeId>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicationRequest {
    #[prost(oneof="replication_request::Message", tags="1, 2")]
    pub message: ::std::option::Option<replication_request::Message>,
}
pub mod replication_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag="1")]
        After(super::super::storage::ChangeId),
        #[prost(message, tag="2")]
        Replication(super::ConfirmWrite),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangesReply {
    #[prost(message, optional, tag="1")]
    pub last_change: ::std::option::Option<super::storage::ChangeId>,
    #[prost(message, repeated, tag="2")]
    pub changes: ::std::vec::Vec<super::storage::Change>,
}
# [ doc = r" Generated client implementations." ] pub mod replication_api_client { # ! [ allow ( unused_variables , dead_code , missing_docs ) ] use tonic :: codegen :: * ; pub struct ReplicationApiClient < T > { inner : tonic :: client :: Grpc < T > , } impl ReplicationApiClient < tonic :: transport :: Channel > { # [ doc = r" Attempt to create a new client by connecting to a given endpoint." ] pub async fn connect < D > ( dst : D ) -> Result < Self , tonic :: transport :: Error > where D : std :: convert :: TryInto < tonic :: transport :: Endpoint > , D :: Error : Into < StdError > , { let conn = tonic :: transport :: Endpoint :: new ( dst ) ? . connect ( ) . await ? ; Ok ( Self :: new ( conn ) ) } } impl < T > ReplicationApiClient < T > where T : tonic :: client :: GrpcService < tonic :: body :: BoxBody > , T :: ResponseBody : Body + HttpBody + Send + 'static , T :: Error : Into < StdError > , < T :: ResponseBody as HttpBody > :: Error : Into < StdError > + Send , { pub fn new ( inner : T ) -> Self { let inner = tonic :: client :: Grpc :: new ( inner ) ; Self { inner } } pub fn with_interceptor ( inner : T , interceptor : impl Into < tonic :: Interceptor > ) -> Self { let inner = tonic :: client :: Grpc :: with_interceptor ( inner , interceptor ) ; Self { inner } } pub async fn stream_changes ( & mut self , request : impl tonic :: IntoStreamingRequest < Message = super :: ReplicationRequest > ) -> Result < tonic :: Response < tonic :: codec :: Streaming < super :: ChangesReply >> , tonic :: Status > { self . inner . ready ( ) . await . map_err ( | e | { tonic :: Status :: new ( tonic :: Code :: Unknown , format ! ( "Service was not ready: {}" , e . into ( ) ) ) } ) ? ; let codec = tonic :: codec :: ProstCodec :: default ( ) ; let path = http :: uri :: PathAndQuery :: from_static ( "/bobsled.replication_api.ReplicationApi/StreamChanges" ) ; self . inner . streaming ( request . into_streaming_request ( ) , path , codec ) . await } } impl < T : Clone > Clone for ReplicationApiClient < T > { fn clone ( & self ) -> Self { Self { inner : self . inner . clone ( ) , } } } }# [ doc = r" Generated server implementations." ] pub mod replication_api_server { # ! [ allow ( unused_variables , dead_code , missing_docs ) ] use tonic :: codegen :: * ; # [ doc = "Generated trait containing gRPC methods that should be implemented for use with ReplicationApiServer." ] # [ async_trait ] pub trait ReplicationApi : Send + Sync + 'static { # [ doc = "Server streaming response type for the StreamChanges method." ] type StreamChangesStream : Stream < Item = Result < super :: ChangesReply , tonic :: Status >> + Send + Sync + 'static ; async fn stream_changes ( & self , request : tonic :: Request < tonic :: Streaming < super :: ReplicationRequest >> ) -> Result < tonic :: Response < Self :: StreamChangesStream > , tonic :: Status > ; } # [ derive ( Debug ) ] # [ doc ( hidden ) ] pub struct ReplicationApiServer < T : ReplicationApi > { inner : _Inner < T > , } struct _Inner < T > ( Arc < T > , Option < tonic :: Interceptor > ) ; impl < T : ReplicationApi > ReplicationApiServer < T > { pub fn new ( inner : T ) -> Self { let inner = Arc :: new ( inner ) ; let inner = _Inner ( inner , None ) ; Self { inner } } pub fn with_interceptor ( inner : T , interceptor : impl Into < tonic :: Interceptor > ) -> Self { let inner = Arc :: new ( inner ) ; let inner = _Inner ( inner , Some ( interceptor . into ( ) ) ) ; Self { inner } } } impl < T : ReplicationApi > Service < http :: Request < HyperBody >> for ReplicationApiServer < T > { type Response = http :: Response < tonic :: body :: BoxBody > ; type Error = Never ; type Future = BoxFuture < Self :: Response , Self :: Error > ; fn poll_ready ( & mut self , _cx : & mut Context < '_ > ) -> Poll < Result < ( ) , Self :: Error >> { Poll :: Ready ( Ok ( ( ) ) ) } fn call ( & mut self , req : http :: Request < HyperBody > ) -> Self :: Future { let inner = self . inner . clone ( ) ; match req . uri ( ) . path ( ) { "/bobsled.replication_api.ReplicationApi/StreamChanges" => { struct StreamChangesSvc < T : ReplicationApi > ( pub Arc < T > ) ; impl < T : ReplicationApi > tonic :: server :: StreamingService < super :: ReplicationRequest > for StreamChangesSvc < T > { type Response = super :: ChangesReply ; type ResponseStream = T :: StreamChangesStream ; type Future = BoxFuture < tonic :: Response < Self :: ResponseStream > , tonic :: Status > ; fn call ( & mut self , request : tonic :: Request < tonic :: Streaming < super :: ReplicationRequest >> ) -> Self :: Future { let inner = self . 0 . clone ( ) ; let fut = async move { inner . stream_changes ( request ) . await } ; Box :: pin ( fut ) } } let inner = self . inner . clone ( ) ; let fut = async move { let interceptor = inner . 1 ; let inner = inner . 0 ; let method = StreamChangesSvc ( inner ) ; let codec = tonic :: codec :: ProstCodec :: default ( ) ; let mut grpc = if let Some ( interceptor ) = interceptor { tonic :: server :: Grpc :: with_interceptor ( codec , interceptor ) } else { tonic :: server :: Grpc :: new ( codec ) } ; let res = grpc . streaming ( method , req ) . await ; Ok ( res ) } ; Box :: pin ( fut ) } _ => Box :: pin ( async move { Ok ( http :: Response :: builder ( ) . status ( 200 ) . header ( "grpc-status" , "12" ) . body ( tonic :: body :: BoxBody :: empty ( ) ) . unwrap ( ) ) } ) , } } } impl < T : ReplicationApi > Clone for ReplicationApiServer < T > { fn clone ( & self ) -> Self { let inner = self . inner . clone ( ) ; Self { inner } } } impl < T : ReplicationApi > Clone for _Inner < T > { fn clone ( & self ) -> Self { Self ( self . 0 . clone ( ) , self . 1 . clone ( ) ) } } impl < T : std :: fmt :: Debug > std :: fmt :: Debug for _Inner < T > { fn fmt ( & self , f : & mut std :: fmt :: Formatter < '_ > ) -> std :: fmt :: Result { write ! ( f , "{:?}" , self . 0 ) } } impl < T : ReplicationApi > tonic :: transport :: NamedService for ReplicationApiServer < T > { const NAME : & 'static str = "bobsled.replication_api.ReplicationApi" ; } }